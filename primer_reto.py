# -*- coding: utf-8 -*-
"""primer_reto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FczzD23KIRQGBssQAngy7NVmlkPknEyn
"""

#---------------------primer reto ------------
#-- Yessica Gomez Salgado -----
import requests
import pandas as pd


#---1. Conectarse al enlace
url = "https://api.stackexchange.com/2.2/search?order=desc&sort=activity&intitle=perl&site=stackoverflow"
#Transforma la informació a un objeto JSON.
req = requests.get(url)
json_obj= req.json()
#Se normaliza la información en base a la propiedad 'items' y se transforma a un DataFrame
df = pd.json_normalize(json_obj['items'])


#----2. Obtener el número de respuestas contestadas y no contestadas
#Cuenta los valores de la columna 'is_answered'.
respuestas = df[ ["is_answered"] ].value_counts()
#print(respuestas)


#----3. Obtener la respuesta con menor número de vistas
min_view = df[df["view_count"] == df["view_count"].min()]
#-Selecciono el view_count  de la fila en posición 0
vc = min_view["owner.reputation"].iloc[0]
#- se le asigno al data frame el view_count que tenga lo mismo que lo que contiene vc
min_view = df[df["owner.reputation"] == vc]
#-al  nuevo data frame le asigno los datos  que deseo mostrar
menor_vistas = min_view[["question_id", "view_count"]]
#print(menor_vistas)


#----4. Obtener la respuesta más vieja y más actual
mas_vieja = df[df["creation_date"] == df["creation_date"].min()]
#-Selecciono el creation_date  de la fila en posición 0
cd = mas_vieja["owner.reputation"].iloc[0]
#-se le asigno al data frame el creation_date que tenga lo mismo que lo que contiene cd
mas_vieja = df[df["owner.reputation"] == cd]
#-a un nuevo data frame le asigno los datos  que deseo mostrar
res_mv = mas_vieja[["question_id", "creation_date","owner.user_id"]]
#print(res_mv)

mas_nueva = df[df["creation_date"] == df["creation_date"].max()]
#-Selecciono el creation_date  de la fila en posición 0
cd = mas_nueva["owner.reputation"].iloc[0]
#-asigno al data frame el creation_date que tenga lo mismo que lo que contiene cd
mas_nueva = df[df["owner.reputation"] == cd]
#-a un nuevo data frame le asigno los datos exactos que deseo mostrar
res_mn = mas_nueva[["question_id", "creation_date","owner.user_id"]]
#print(res_mn)


#---5. Obtener la respuesta del owner que tenga una mayor reputación
mayor_reputation = df[df["owner.reputation"] == df["owner.reputation"].max()]
#-se selecciono el owner.reputation  de la fila en posición 0
max = mayor_reputation["owner.reputation"].iloc[0]
#-asigno al data frame el owner.reputation que tenga lo mismo que lo que contiene max
mayor_reputation = df[df["owner.reputation"] == max]
#-a un nuevo data frame le asigno los datos exactos que deseo mostrar
max_mayor_reputation= mayor_reputation[["owner.reputation", "owner.user_id", "owner.display_name"]]
#print(max_mayor_reputation)



#----6. Imprimir en consola del punto 2 al 5
print("2. Obtener el número de respuestas contestadas y no contestadas:")
count = 0
for i in respuestas:
    if(respuestas.index[count][0] == True):
        var = "contestadas"
    else:
        var = "no contestadas"
    print("Total %s: %i" % (var, i) )
    count += 1

print()
print("3. Obtener la respuesta con menor número de vistas")
for i in menor_num_vistas.keys():
    print("%s: %s" % (i, menor_vistas[i].values[0]) )

print()
print("-----------------Pregunta 4.-----------------")
print("Obtener la respuesta más vieja")
for i in res_mv.keys():
    print("%s: %s" % (i, res_mv[i].values[0]) )
print("\nObtener la respuesta más actual")
for i in res_mn.keys():
    print("%s: %s" % (i, res_mn[i].values[0]) )
print("----------------------------------------------")


print()
print("5. Obtener la respuesta del owner que tenga una mayor reputación:")
for i in max_mayor_reputation.keys():
    print("%s: %s" % (i, max_mayor_reputation[i].values[0]) )